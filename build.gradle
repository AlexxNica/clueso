plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id "com.github.maiflai.scalatest" version "0.16"
}

group 'com.scality.clueso'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    provided
    compile.extendsFrom provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided

        resources {
            filter.exclude("application.conf")
        }
    }
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    provided "org.scala-lang:scala-library:"+scalaVersion
    provided "org.scala-lang:scala-reflect:"+scalaVersion
    provided "org.scala-lang:scala-compiler:"+scalaVersion

    provided 'org.apache.spark:spark-sql_'+scalaVersion+':' + sparkVersion
    compile 'org.apache.spark:spark-sql-kafka-0-10_'+scalaVersion+':' + sparkVersion
    provided 'org.apache.spark:spark-streaming_'+scalaVersion+':' + sparkVersion
    provided 'org.apache.spark:spark-core_'+scalaVersion+':' + sparkVersion

    compile 'org.apache.hadoop:hadoop-aws:2.7.2'

    compile group: 'com.typesafe', name: 'config', version: '1.3.1'
    compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.0'

    compile group: 'commons-io', name: 'commons-io', version: '2.5'

    testRuntime 'org.apache.hadoop:hadoop-aws:2.7.2'
    testCompile 'org.scalatest:scalatest_2.11:3.0.1'
    testRuntime 'org.pegdown:pegdown:1.4.2'
}

task run(type: JavaExec, dependsOn: classes) {
    main = mainClassFile
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task debug(type: JavaExec, dependsOn: classes) {
    main = mainClassFile
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
    debug true
}

jar {
    classifier = 'all'
    manifest {
        attributes 'Implementation-Title': title,
                'Implementation-Version': version,
                'Main-Class': mainClassFile
    }
    dependsOn configurations.runtime
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude "application.conf"
    }
    zip64 true
}

shadowJar {
    classifier = 'shadow'
    append 'reference.conf'
    dependencies {

    }
}

idea {
    module {
        // IntelliJ does not know about the standard idiom of provided as used in managing
        // uber/shaded jar dependencies. Make it so!
        scopes.PROVIDED.plus += [ configurations.provided ]
    }
}

test {
    maxParallelForks = 1
//    debug = true
}