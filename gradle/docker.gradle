buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.1.0'
    }
}

// use fully qualified class name
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

/********
 * PULL *
 ********/

task pullGraphiteImage(type: DockerPullImage) {
    repository = "kamon/grafana_graphite"
    tag = "latest"
}

task pullAlluxioImage(type: DockerPullImage) {
    repository = "alluxio/alluxio-community"
    tag = "1.5.0"
}

/*********
 * BUILD *
 *********/

//task builAlluxioImage(type: DockerBuildImage) {
//    inputDir = file('docker/myapp')
//    tag = 'test/myapp'
//}

task builLivyImage(type: DockerBuildImage) {
    inputDir = file('docker/images/clueso-docker-livy')
    tag = 'scality/clueso-livy:0.4.0-alluxio'
}

task builSparkBaseImage(type: DockerBuildImage) {
    inputDir = file('docker/images/docker-spark/base')
    tag = 'scality/spark-base:hadoop2.8'
}

task builSparkMasterImage(type: DockerBuildImage) {
    dependsOn builSparkBaseImage
    inputDir = file('docker/images/docker-spark/master')
    tag = 'scality/spark-master:2.1.1-hadoop28'
}

task builSparkWorkerImage(type: DockerBuildImage) {
    dependsOn builSparkBaseImage
    inputDir = file('docker/images/docker-spark/worker')
    tag = 'scality/spark-worker:2.1.1-hadoop28-alluxio'
}


/**********
 * CREATE *
 **********/

task createGraphiteContainer(type: DockerCreateContainer) {
    dependsOn pullGraphiteImage
    containerName = 'graphite'

    targetImageId { 'kamon/grafana_graphite:latest' }
    portBindings = [ '8000:80',
                     '8081:81',
                     '8125:8125/udp',
                     '8126:8126',
                     '2003:2003',
                     '2004:2004',
                     '7002:7002',
                     '3000:3000']
}


task createAlluxioMasterContainer(type: DockerCreateContainer) {
    dependsOn pullAlluxioImage
    targetImageId { pullAlluxioImage.getImageId() }

    doFirst {
        mkdir 'tmp/docker/underStorage'
    }

    containerName = 'alluxio-master'

    //targetImageId { 'scality/clueso-alluxio' }
    portBindings = [ "19998:19998",
                     "19999:19999" ]

    env = [ 'ALLUXIO_UNDERFS_ADDRESS=/underStorage',
            'ALLUXIO_MASTER_HOSTNAME=localhost' ]
    volumes = [
            "./tmp/docker/underStorage:/underStorage" ]


    cmd = [ 'master' ]
}

task createSparkMasterContainer(type: DockerCreateContainer) {
//    dependsOn buildMyAppImage
//    targetImageId { buildMyAppImage.getImageId() }
    portBindings = ['8080:8080']
}

task createSparkWorkerContainer(type: DockerCreateContainer) {
//    dependsOn buildMyAppImage
//    targetImageId { buildMyAppImage.getImageId() }
    portBindings = ['8080:8080']
}

/*********
 * START *
 *********/

// TODO S3

task startGraphiteContainer(type: DockerStartContainer) {
    dependsOn createGraphiteContainer
    targetContainerId { createGraphiteContainer.getContainerId() }
}

task startAlluxioMasterContainer(type: DockerStartContainer) {
    dependsOn createAlluxioMasterContainer
    // dependsOn pullAlluxioMasterImage
    targetContainerId { createAlluxioMasterContainer.getContainerId() }
}

task startSparkMasterContainer(type: DockerStartContainer) {
    dependsOn createSparkMasterContainer
    targetContainerId { createSparkMasterContainer.getContainerId() }
}

task startSparkWorkerContainer(type: DockerStartContainer) {
    dependsOn createSparkWorkerContainer
    targetContainerId { createSparkWorkerContainer.getContainerId() }
}

/********
 * STOP *
 ********/

task stopGraphiteContainer(type: DockerStopContainer) {
    targetContainerId { createGraphiteContainer.getContainerId() }
}

task stopAlluxioMasterContainer(type: DockerStopContainer) {
    targetContainerId { startAlluxioMasterContainer.getContainerId() }
}

task stopSparkMasterContainer(type: DockerStopContainer) {
    targetContainerId { createSparkMasterContainer.getContainerId() }
}

task stopSparkWorkerContainer(type: DockerStopContainer) {
    targetContainerId { createSparkWorkerContainer.getContainerId() }
}


/**********
 * REMOVE *
 **********/

task removeGraphiteContainer(type: DockerRemoveContainer) {
    dependsOn stopGraphiteContainer
    targetContainerId { stopGraphiteContainer.getContainerId() }
    force = true
}

task removeAlluxioMasterContainer(type: DockerRemoveContainer) {
    dependsOn stopAlluxioMasterContainer
    targetContainerId { stopAlluxioMasterContainer.getContainerId() }
    force = true
}


task integrationTest(type: Test) {
    dependsOn startGraphiteContainer
    dependsOn startAlluxioMasterContainer
    // dependsOn // s3 container

//    finalizedBy stopAlluxioMasterContainer
//    finalizedBy stopGraphiteContainer
    finalizedBy removeAlluxioMasterContainer
    finalizedBy removeGraphiteContainer
}

